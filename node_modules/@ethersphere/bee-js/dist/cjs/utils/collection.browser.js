"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFolderSize = exports.makeCollectionFromFS = void 0;
/**
 * Creates array in the format of Collection with data loaded from directory on filesystem.
 * The function loads all the data into memory!
 *
 * @param dir path to the directory
 */
function makeCollectionFromFS(dir) {
    return __awaiter(this, void 0, void 0, function* () {
        throw new Error('Creating Collection from File System is not supported in browsers!');
    });
}
exports.makeCollectionFromFS = makeCollectionFromFS;
/**
 * Calculate folder size recursively
 *
 * @param dir the path to the folder to check
 * @returns size in bytes
 */
function getFolderSize(dir) {
    return __awaiter(this, void 0, void 0, function* () {
        throw new Error('Creating Collection from File System is not supported in browsers!');
    });
}
exports.getFolderSize = getFolderSize;
