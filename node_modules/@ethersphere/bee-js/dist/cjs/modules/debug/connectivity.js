"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pingPeer = exports.getTopology = exports.removePeer = exports.getBlocklist = exports.getPeers = exports.getNodeAddresses = void 0;
const http_1 = require("../../utils/http");
function getNodeAddresses(ky) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            path: 'addresses',
            responseType: 'json',
        });
        return response.data;
    });
}
exports.getNodeAddresses = getNodeAddresses;
function getPeers(ky) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            path: 'peers',
            responseType: 'json',
        });
        return response.data.peers;
    });
}
exports.getPeers = getPeers;
function getBlocklist(ky) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            path: 'blocklist',
            responseType: 'json',
        });
        return response.data.peers;
    });
}
exports.getBlocklist = getBlocklist;
function removePeer(ky, peer) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            path: `peers/${peer}`,
            responseType: 'json',
            method: 'DELETE',
        });
        return response.data;
    });
}
exports.removePeer = removePeer;
function getTopology(ky) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            path: `topology`,
            responseType: 'json',
        });
        return response.data;
    });
}
exports.getTopology = getTopology;
function pingPeer(ky, peer) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            path: `pingpong/${peer}`,
            responseType: 'json',
            method: 'POST',
        });
        return response.data;
    });
}
exports.pingPeer = pingPeer;
