"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllSettlements = exports.getSettlements = void 0;
const http_1 = require("../../utils/http");
const settlementsEndpoint = 'settlements';
/**
 * Get amount of sent and received from settlements with a peer
 *
 * @param ky Ky debug instance
 * @param peer  Swarm address of peer
 */
function getSettlements(ky, peer) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            path: `${settlementsEndpoint}/${peer}`,
            responseType: 'json',
        });
        return response.data;
    });
}
exports.getSettlements = getSettlements;
/**
 * Get settlements with all known peers and total amount sent or received
 *
 * @param ky Ky debug instance
 */
function getAllSettlements(ky) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            path: settlementsEndpoint,
            responseType: 'json',
        });
        return response.data;
    });
}
exports.getAllSettlements = getAllSettlements;
