"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateTag = exports.deleteTag = exports.getAllTags = exports.retrieveTag = exports.createTag = void 0;
const http_1 = require("../utils/http");
const endpoint = 'tags';
/**
 * Create new tag on the Bee node
 *
 * @param url Bee tag URL
 */
function createTag(ky) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            method: 'post',
            path: endpoint,
            responseType: 'json',
        });
        return response.data;
    });
}
exports.createTag = createTag;
/**
 * Retrieve tag information from Bee node
 *
 * @param url Bee tag URL
 * @param uid UID of tag to be retrieved
 */
function retrieveTag(ky, uid) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            path: `${endpoint}/${uid}`,
            responseType: 'json',
        });
        return response.data;
    });
}
exports.retrieveTag = retrieveTag;
/**
 * Get limited listing of all tags.
 *
 * @param url
 * @param offset
 * @param limit
 */
function getAllTags(ky, offset, limit) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            path: `${endpoint}`,
            searchParams: { offset, limit },
            responseType: 'json',
        });
        return response.data.tags;
    });
}
exports.getAllTags = getAllTags;
/**
 * Removes tag from the Bee node.
 * @param url
 * @param uid
 */
function deleteTag(ky, uid) {
    return __awaiter(this, void 0, void 0, function* () {
        yield (0, http_1.http)(ky, {
            method: 'delete',
            path: `${endpoint}/${uid}`,
        });
    });
}
exports.deleteTag = deleteTag;
/**
 * Updates tag
 * @param url
 * @param uid
 * @param reference
 */
function updateTag(ky, uid, reference) {
    return __awaiter(this, void 0, void 0, function* () {
        yield (0, http_1.http)(ky, {
            method: 'patch',
            path: `${endpoint}/${uid}`,
            json: {
                reference,
            },
        });
    });
}
exports.updateTag = updateTag;
