"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllPins = exports.getPin = exports.unpin = exports.pin = void 0;
const http_1 = require("../utils/http");
const PINNING_ENDPOINT = 'pins';
/**
 * Pin data with given reference
 *
 * @param ky Ky instance for given Bee class instance
 * @param reference Bee data reference
 */
function pin(ky, reference) {
    return __awaiter(this, void 0, void 0, function* () {
        yield (0, http_1.http)(ky, {
            method: 'post',
            responseType: 'json',
            path: `${PINNING_ENDPOINT}/${reference}`,
        });
    });
}
exports.pin = pin;
/**
 * Unpin data with given reference
 *
 * @param ky Ky instance for given Bee class instance
 * @param reference Bee data reference
 */
function unpin(ky, reference) {
    return __awaiter(this, void 0, void 0, function* () {
        yield (0, http_1.http)(ky, {
            method: 'delete',
            responseType: 'json',
            path: `${PINNING_ENDPOINT}/${reference}`,
        });
    });
}
exports.unpin = unpin;
/**
 * Get pin status for specific address.
 *
 * @param ky Ky instance
 * @param reference
 * @throws Error if given address is not pinned
 */
function getPin(ky, reference) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            method: 'get',
            responseType: 'json',
            path: `${PINNING_ENDPOINT}/${reference}`,
        });
        return response.data;
    });
}
exports.getPin = getPin;
/**
 * Get list of all pins
 *
 * @param ky Ky instance
 */
function getAllPins(ky) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            method: 'get',
            responseType: 'json',
            path: `${PINNING_ENDPOINT}`,
        });
        return response.data.references;
    });
}
exports.getAllPins = getAllPins;
