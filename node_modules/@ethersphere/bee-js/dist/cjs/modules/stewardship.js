"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRetrievable = exports.reupload = void 0;
const http_1 = require("../utils/http");
const stewardshipEndpoint = 'stewardship';
/**
 * Reupload locally pinned data
 * @param ky Ky instance
 * @param reference
 * @param options
 * @throws BeeResponseError if not locally pinned or invalid data
 */
function reupload(ky, reference) {
    return __awaiter(this, void 0, void 0, function* () {
        yield (0, http_1.http)(ky, {
            method: 'put',
            path: `${stewardshipEndpoint}/${reference}`,
        });
    });
}
exports.reupload = reupload;
function isRetrievable(ky, reference) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield (0, http_1.http)(ky, {
            method: 'get',
            responseType: 'json',
            path: `${stewardshipEndpoint}/${reference}`,
        });
        return response.data.isRetrievable;
    });
}
exports.isRetrievable = isRetrievable;
