import { KyRequestOptions } from '../types';
export declare class BeeError extends Error {
    constructor(message: string);
}
export declare class BeeArgumentError extends BeeError {
    readonly value: unknown;
    constructor(message: string, value: unknown);
}
export declare class BeeRequestError extends BeeError {
    readonly requestOptions: KyRequestOptions;
    /**
     * @param message
     * @param requestOptions KyOptions that were used to assemble the request. THIS MIGHT NOT BE COMPLETE! If custom Ky instance was used that has set defaults then these defaults are not visible in this object!
     */
    constructor(message: string, requestOptions: KyRequestOptions);
}
export declare class BeeResponseError extends BeeError {
    readonly status: number;
    readonly response: Response;
    readonly responseBody: string;
    readonly requestOptions: KyRequestOptions;
    /**
     * @param status HTTP status code number
     * @param response Response returned from the server
     * @param responseBody Response body as string which is returned from response.text() call
     * @param requestOptions KyOptions that were used to assemble the request. THIS MIGHT NOT BE COMPLETE! If custom Ky instance was used that has set defaults then these defaults are not visible in this object!
     * @param message
     */
    constructor(status: number, response: Response, responseBody: string, requestOptions: KyRequestOptions, message: string);
}
export declare class BeeNotAJsonError extends BeeError {
    constructor();
}
