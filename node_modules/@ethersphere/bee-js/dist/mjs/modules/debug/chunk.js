var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

import { http } from "../../utils/http.js";
const endpoint = 'chunks';
/**
 * Check if chunk at address exists locally
 *
 * @param ky Ky debug instance
 * @param address  Swarm address of chunk
 *
 * @returns BeeGenericResponse if chunk is found or throws an exception
 */

export function checkIfChunkExistsLocally(ky, address) {
  return __awaiter(this, void 0, void 0, function* () {
    const response = yield http(ky, {
      path: endpoint + `/${address}`,
      responseType: 'json'
    });
    return response.data;
  });
}
/**
 * Delete a chunk from local storage
 *
 * @param ky Ky debug instance
 * @param address  Swarm address of chunk
 *
 * @returns BeeGenericResponse if chunk was deleted or throws an exception
 */

export function deleteChunkFromLocalStorage(ky, address) {
  return __awaiter(this, void 0, void 0, function* () {
    const response = yield http(ky, {
      method: 'delete',
      path: endpoint + `/${address}`,
      responseType: 'json'
    });
    return response.data;
  });
}